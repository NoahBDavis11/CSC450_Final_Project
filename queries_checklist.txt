SELECT queries demonstrating: 

Two-table join – Noah
Joins park concessions and concession operator tables to provide all employees who operate concessions and which ones they do

SELECT *, GROUP_CONCAT(DISTINCT emp_id SEPARATOR ', ') AS opEmps 
FROM parkConcessions c 
LEFT JOIN employees_concessions_operate eco ON c.cons_id = eco.cons_id  
GROUP BY c.cons_id

Three-table join – Noah
Joins rides, repairs, and replacement parts tables

"SELECT * 
FROM replacementParts 
natural join repairs 
natural join rides WHERE rep_num = ?";

Self-join – AJ
Displays the full names of two employees that share the same role. 
Their ids cannot be the same and the first employee must have a greater id than the second to avoid duplicate.

SELECT CONCAT(A.emp_FN,' ',A.emp_LN) AS Employee1, CONCAT(B.emp_FN,' ',B.emp_LN) AS Employee2, A.emp_role
FROM employees A, employees B
WHERE A.emp_id <> B.emp_id
AND A.emp_role = B.emp_role 
and A.emp_id > B.emp_id
ORDER BY A.emp_role;

An aggregate function – Noah
Makes an entry for every repair a ride has had and how many parts that repair had, along with additional string formatting.

SELECT *, r.rep_num as rep_id, count(part) as pt_count,  IFNULL(GROUP_CONCAT(distinct erp.emp_id SEPARATOR ', '), 'none') as assignedEmps 
FROM repairs r 
LEFT JOIN replacementParts rp ON r.rep_num = rp.rep_num AND r.ride_id = rp.ride_id 
LEFT JOIN employees_repairs_perform erp ON r.rep_num = erp.rep_num AND r.ride_id = erp.ride_id 
WHERE r.ride_id = ?
GROUP BY r.rep_num;

An aggregate function using GROUP BY and HAVING – Noah
Aggregate function that displayes each ride taht has had at least 3 repairs done to it

Select ride_name, count(*) as Repair_Count from repairs natural join rides group by ride_id having count(*) > 2;

A text-based-search query using LIKE with wildcard(s) – Noah
Search query that returns all passenger restrictions for rides that are based on 'weight'.

Select ride_name, ride_restrictions from rides natural join passengerRestrictions where ride_restrictions Like "%weight%"; 

A subquery – Noah
Rides located in the most crowded park section.

SELECT ride_name 
FROM rides 
NATURAL JOIN buildings 
WHERE section_id = (
SELECT section_id 
FROM buildings 
GROUP BY section_id 
ORDER BY COUNT(*) DESC 
LIMIT 1
);


Functionality:

One stored function – Eric
Function takes a given date and returns difference in years between the current date and the given date

DELIMITER $$
CREATE FUNCTION years_hired(date1 date) RETURNS INT DETERMINISTIC
BEGIN
 DECLARE date2 DATE;
  SELECT current_date() INTO date2;
  RETURN year(date2) - year(date1);
END $$
DELIMITER ;

Call returns table that returns all employees and how many years they have been working at the company
SELECT emp_id, emp_FN, emp_LN, years_hired(date_hired) AS 'Years working at park' FROM employees;

One stored procedure – Eric
Procedure provides total sum cost of all repairs done at the amusement park

DELIMITER //
CREATE PROCEDURE getRepairCostSum()
BEGIN
 SELECT SUM(total_cost) FROM repairs;
END //
DELIMITER ;

One trigger – AJ
If after an employee is inserted into the database their wage is NULL then it is set to 40000.

DELIMITER $$
CREATE TRIGGER after_employees_insert
AFTER INSERT
ON employees FOR EACH ROW
BEGIN
    IF NEW.wage IS NULL THEN
        UPDATE employees SET NEW.wage = 40000;
    END IF;
END$$
DELIMITER ;
